APPLICATIONS OF MACHINE LEARNING

1.Self-driving Cars
2.Robotics
3.Language Processing
4. Vision Processing
5. Forecasting Stock Market Trends
6.Games


Steps in machine learning
1. import data to a csv file
2. Clean data i.e duplicated data,irrevelant data
3. Split the Data into Training / Test Sets
4. Create Model i.e neural network
5. Train the model
6. Make Predictions
7. Evaluate and improve the values

libraries and tools
1. Numpy
2. Pandas
3. Matplotlib
4. Scikit-learn
5. jupyter - environment for ml

THINGS TO NOTE
Visually checking your data with these commands is an important part of a data scientist's job. You'll frequently find surprises in the dataset that deserve further inspection.


keywords

Dataframe = The most important part of the Pandas library is the DataFrame. A DataFrame holds the type of data you might think of as a table. This is similar to a sheet in Excel, or a table in a SQL database.

Dataframe properties
data.columns = reads the columns;

### select the predicting target we use:
1.Dot notation, which we use to select the "prediction target"
i.e predicting target  is y so it would be 
y = dataweareusing.columnwewant e.g y =houses.prices;

2.Selecting with a column list, which we use to select the "features"
We select multiple features by providing a list of column names inside brackets. Each item in that list should be a string (with quotes).

e.g 
melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
By convention, this data is called X.

X = melbourne_data[melbourne_features]

//pandas
we use  - import pandas as pd;
methods in pandas
1.newfile = pd.read_csv("file name");
2.newfile.describe(); //show the brief info about the data i.e mean ,count of columns ,percentile ,quantile i.e....
3.newfile.head();prints the top 5 levels of data



Building Your Model
You will use the scikit-learn library to create your models. When coding, this library is written as sklearn, as you will see in the sample code. Scikit-learn is easily the most popular library for modeling the types of data typically stored in DataFrames.

The steps to building and using a model are:

Define: What type of model will it be? A decision tree? Some other type of model? Some other parameters of the model type are specified too.
Fit: Capture patterns from provided data. This is the heart of modeling.
Predict: Just what it sounds like
Evaluate: Determine how accurate the model's predictions are.
Here is an example of defining a decision tree model with scikit-learn and fitting it with the features and target variable.

from sklearn.tree import DecisionTreeRegressor

# Define model. Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)

# Fit model
melbourne_model.fit(X, y)

#predict model
print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")


#model validation
What is Model Validation
You'll want to evaluate almost every model you ever build. In most (though not all) applications, the relevant measure of model quality is predictive accuracy. In other words, will the model's predictions be close to what actually happens.

Many people make a huge mistake when measuring predictive accuracy. They make predictions with their training data and compare those predictions to the target values in the training data. You'll see the problem with this approach and how to solve it in a moment, but let's think about how we'd do this first.

You'd first need to summarize the model quality into an understandable way. If you compare predicted and actual home values for 10,000 houses, you'll likely find mix of good and bad predictions. Looking through a list of 10,000 predicted and actual values would be pointless. We need to summarize this into a single metric.

There are many metrics for summarizing model quality, but we'll start with one called Mean Absolute Error (also called MAE). Let's break down this metric starting with the last word, error.

The prediction error for each house is: 

error=actualâˆ’predicted

from sklearn.metrics import mean_absolute_error

predicted_home_prices = melbourne_model.predict(X)
mean_absolute_error(y, predicted_home_prices)
print(melbourne_model.predict(X.head()))
